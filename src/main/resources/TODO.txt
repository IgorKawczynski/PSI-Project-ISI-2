# TODO --> Do rozbudowania encja 'TRADE' + dodanie dodatkowej encji i rozbudowa jej (Baza jest bardzo uboga)
# TODO --> Error Lista do restów -- implementacja bledów, wiadomosci i stacktrace'ów
# TODO --> Do poprawki własne exceptiony -> własny message + defaultowy z IllegalArgumentException/Innej klasy
# TODO --> Dodanie uprawnień zależnie od typu usera ('CLIENT' i 'ADMIN')
# TODO --> TESTY; /src/test/...
# TODO --> do wrzucenia kolejne rzeczy do security configu + mozliwosc logowania (moze thymeleaf)

# Na problem z domyslnym schematem
# spring.jpa.properties.hibernate.hbm2ddl.jdbc_metadata_extraction_strategy=individually

# SWAGGER URL STARY
# http://localhost:8080/swagger-ui/?fbclid=IwAR3-LZ06oJMOrMFAaj3j-WcPiDqUWxB8t0N9JevSKmcEJ6kHEzCWJJPXFDw#/user-controller/getUserByEmailUsingGET
# SWAGGER URL NOWY
# http://localhost:8080/swagger-ui/index.html

# FLYWAY
# spring.flyway.baseline-on-migrate=true
# spring.flyway.url=jdbc:mysql://localhost:3306/ah
# spring.flyway.user=root
# spring.flyway.password=qwerty0987654321

# W razie problemu z sesją springa
# spring.session.jdbc.initialize-schema=always


Aplikacja AuctionHouse jest prostym serwisem aukcyjnym pozwalającym użytkownikom na:
-zarejestrowanie się
-zalogowanie się
-edycję danych konta
-usunięcie konta
^CRUD
-dodanie oferty sprzedaży przedmiotu
-przeglądania ofert sprzedaży (paginacja, wyszukiwanie, sortowanie)
-edytowanie swojej oferty sprzedaży
-usunięcie swojej oferty sprzedaży
^ - Ustawienie praw dostępu dla poszczególnych widoków
-kupno przedmiotu od innego sprzedającego
-wystawienie opinii innemu użytkownikowi, jeśli kupiło się od niego przedmiot


item.status -  dostępny/niedostępny   - po zakupie update w bazie na niedostępny
trade.value - item.price + np. cena wysyłki
sprzedającego w tradzie można określić po item_id
w opiniach buyer to ten, ktory zostawia opinie po kupnie, a user_id to ten dla którego opinia zostaje wydana
(na podstwie trade_id->item_id->seller_id)