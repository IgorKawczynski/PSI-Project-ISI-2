********************************* THINGS TO DO *********************************

1. TESTY
    a) Do wybranych dwóch modeli dodaj właściciela, jako użytkownika wbudowanego w Django
    b) Ustaw różne opcje praw dostępu dla poszczególnych modeli - tak, aby były w miarę sensowne
    c) Przy dodawaniu rekordów do modeli z właścicielem - ustaw automatycznie właściciela jako użytkownika, który dany rekord stworzył
    d) Dodaj widoki dla użytkowników bez możliwości modyfikacji
    e) Zadania dotyczące testowania w oparciu o POSTMANa:
        a2) Stwórz kolekcję, która będzie zawierała Requesty "GET, POST, PUT, DELETE"
        b2) Użyj zmiennych lokalnych, globalnych i środowiskowych
        c2) Stwórz testy, które będą pobierały i porównywały wcześniej stworzone zmienne w testach
        d2) Za pomocą testów stwórz i zapisz nowe zmienne globalne, lokalne i środowiskowe.
        e2) Stwórz Testy , które będą sprawdzały:
                -kod odpowiedzi (201 lub 202)
                -Czas odpowiedzi mniejszy niż (np. 300ms)
                -Status odpowiedzi "OK"
                -Content type

2. Część zaimplementowana w GraphQL ---------------------------------------------------------------------------------------------
   a) Stwórz nowy projekt w Django, -- OK
   b) Przygotuj co najmniej 3 modele połączone kluczami obcymi - można się posiłkować aplikacją REST, -- OK
   c) Zmigruj modele na bazę zewnętrzną, -- OK
   d) Przygotuj plik schema z odpowiednimi klasami opartymi o DjangoObjectType, -- OK
   e) Przygotuj klasę Query wyświetlającą dane, -- OK
   f) Przygotuj mutację dla poszczególnych modeli obsługujące dodawanie, modyfikację i usuwanie danych, -- nieOK
   g) Dodaj ścieżkę dla GraphQL w pliku urls.py, -- OK
   h) Zarejestruj modele w pliku admin.py, -- OK?
   i) Stwórz superusera, -- nieOK
   j) Dodaj przykładowe dane z poziomu admina, -- nieOK
   k) Przygotuj 5 przykładowych zapytań, w wykorzystaniem danych z wielu modeli, -- nieOK
   l) Stwórz 5 przykładowych mutacji. -- nieOK

********************************* NOTES *********************************

# !!opinie tworzyc na nowego usera i nowego buyera!!

# In case problems with default schema
# spring.jpa.properties.hibernate.hbm2ddl.jdbc_metadata_extraction_strategy=individually

# SWAGGER OLD URL
# http://localhost:8080/swagger-ui/?fbclid=IwAR3-LZ06oJMOrMFAaj3j-WcPiDqUWxB8t0N9JevSKmcEJ6kHEzCWJJPXFDw#/user-controller/getUserByEmailUsingGET
# SWAGGER NEW URL
# http://localhost:8080/swagger-ui/index.html

# FLYWAY THINGS
# spring.flyway.baseline-on-migrate=true
# spring.flyway.url=jdbc:mysql://localhost:3306/ah
# spring.flyway.user=root
# spring.flyway.password=qwerty0987654321

# In case problems with Spring's session
# spring.session.jdbc.initialize-schema=always

********************************* README *********************************

Aplikacja webowa 'AuctionHouse' jest serwisem aukcyjnym pozwalającym użytkownikom na:
-zarejestrowanie się
-zalogowanie się
-edycję danych konta
-usunięcie konta (CRUD)
-dodanie oferty sprzedaży przedmiotu
-przeglądania ofert sprzedaży (paginacja, wyszukiwanie, sortowanie)
-edytowanie swojej oferty sprzedaży
-usunięcie swojej oferty sprzedaży
-kupno przedmiotu od innego sprzedającego
-wystawienie opinii innemu użytkownikowi, jeśli kupiło się od niego przedmiot


item.status -  dostępny/niedostępny   - po zakupie update w bazie na niedostępny
trade.value - item.price + np. cena wysyłki
sprzedającego w tradzie można określić po item_id
w opiniach buyer to ten, ktory zostawia opinie po kupnie, a user_id to ten dla którego opinia zostaje wydana
(na podstawie trade_id -> item_id -> seller_id)