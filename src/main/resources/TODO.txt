********************************* THINGS TO DO *********************************

1. Modyfikacja modelu bazy danych -- DONE
2. Rozbudowa nowego modelu bazy danych - DONE

3. Error Lista do restów -- implementacja bledów, wiadomosci i stacktrace'ów -- W TRAKCIE (IGOR)

4. Do poprawki własne exceptiony -> własny message + defaultowy z IllegalArgumentException/Innej klasy -- W TRAKCIE (IGOR)

5. Dodanie uprawnień zależnie od typu usera ('CLIENT' i 'ADMIN') - Permissions (może logowanie na starcie?)
   a) Dodaj zezwolenia do aplikacji, tak by tylko zarejestrowani uzytkownicy mogli korzystać z endpointów, -- DONE
   b) Dodaj endpointy, które są dostępne tylko dla administratora. -- DONE
   c) Ustaw niektóre resty (typu dodaj usera) tylko dla Admina -> gety dla usera daj dla Klienta

6. Upgrade filtrowania i paginacji dla większej ilości metod (dla wszystkich getów) -- W TRAKCIE (ADAM)
   a) W związach jeden do wielu po stronie jeden wstaw linki do rekordów po stronie wiele - użyj HyperlinkedRelatedField z klasy HyperlinkedModelSerializer
   b) Ustaw globalną paginację z liczbą pozycji na stronę 5
   c) Ustaw filtry i sortowanie na poszczególne widoki
   d) Dodaj własne filtry na datę i liczby jako przedział od - do

7. TESTY; /src/test/... --> https://gitlab.com/pdrozda/psi-cwiczenia/-/tree/master/08%20Autentykacja,%20Testowanie

8. Część zaimplementowana w GraphQL
   a) Stworzenie modeli przystosowanych do GraphQL -- DONE
   b) Stworzenie na podstawie stworzonych modeli bazy danych
   c) Stworzenie mutacji (dodanie, usuniecie, modyfikacja danych)
   d) Zarejestrowanie modeli w głównym widoku
   e) Dodanie przykładowych danych -- DONE
   f) Utworzenie kilkunastu przykładowych zapytań (z wykorzystaniem kluczy obcych)
   g) Utworzenie 5 przykładowych mutacji

********************************* NOTES *********************************

# In case problems with default schema
# spring.jpa.properties.hibernate.hbm2ddl.jdbc_metadata_extraction_strategy=individually

# SWAGGER OLD URL
# http://localhost:8080/swagger-ui/?fbclid=IwAR3-LZ06oJMOrMFAaj3j-WcPiDqUWxB8t0N9JevSKmcEJ6kHEzCWJJPXFDw#/user-controller/getUserByEmailUsingGET
# SWAGGER NEW URL
# http://localhost:8080/swagger-ui/index.html

# FLYWAY THINGS
# spring.flyway.baseline-on-migrate=true
# spring.flyway.url=jdbc:mysql://localhost:3306/ah
# spring.flyway.user=root
# spring.flyway.password=qwerty0987654321

# In case problems with Spring's session
# spring.session.jdbc.initialize-schema=always

********************************* README *********************************

Aplikacja webowa 'AuctionHouse' jest serwisem aukcyjnym pozwalającym użytkownikom na:
-zarejestrowanie się
-zalogowanie się
-edycję danych konta
-usunięcie konta (CRUD)
-dodanie oferty sprzedaży przedmiotu
-przeglądania ofert sprzedaży (paginacja, wyszukiwanie, sortowanie)
-edytowanie swojej oferty sprzedaży
-usunięcie swojej oferty sprzedaży
-kupno przedmiotu od innego sprzedającego
-wystawienie opinii innemu użytkownikowi, jeśli kupiło się od niego przedmiot


item.status -  dostępny/niedostępny   - po zakupie update w bazie na niedostępny
trade.value - item.price + np. cena wysyłki
sprzedającego w tradzie można określić po item_id
w opiniach buyer to ten, ktory zostawia opinie po kupnie, a user_id to ten dla którego opinia zostaje wydana
(na podstawie trade_id -> item_id -> seller_id)